# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  Test:
    name: Test - ${{ matrix.os }} / ${{ matrix.python-version }} ${{ matrix.suffix }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        include:
          - os: Ubuntu
            image: ubuntu-latest

    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install --no-root

      - name: Check linting with flake8
        run: poetry run flake8 .
      - name: Check formatting with black
        run: poetry run black --check --diff .
      - name: Check imports with isort
        run: poetry run isort --check-only -v --profile black .
      - name: Check static typing with mypy
        run: poetry run mypy .

  Build:
    name: Build - ${{ matrix.os }} / ${{ matrix.python-version }} ${{ matrix.suffix }}
    needs: Test
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        include:
          - os: Ubuntu
            image: ubuntu-latest

    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install --no-root

      - name: Install build dependencies
        run: |
          pip install --upgrade pip
          pip install build packaging
          pip install poetry-core poetry-dynamic-versioning
      - name: Build the package
        run: python -m build
      - name: Install the built package
        run: poetry run pip install dist/*.whl
      - name: Test the installed package
        run: |
          poetry run coverage run --branch --source="techflurry.controller" --module pytest -vvv
          poetry run coverage report --show-missing
